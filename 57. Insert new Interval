class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        if(intervals.length==0){
            int[][] ans = new int[1][2];
            ans[0]=newInterval;
            return ans;
        }
        Arrays.sort(intervals, new Comparator<int[]>(){
            public int compare(int[] p1,int[] p2){
                    return p1[0]-p2[0];                
        });
        ArrayList<int[]> list = new ArrayList<>();
        for(int i=0;i<intervals.length;i++){
            list.add(intervals[i]);
        }
        int s = newInterval[0];
        int e = newInterval[1];
        int ctr=0;
        while(ctr<intervals.length && list.get(ctr)[0]<s){
            ctr++;
        }       
        int[] arr = new int[2];
        arr[0]=s;
        arr[1]=e;
        list.add(ctr,arr);
        Stack<int[]> st = new Stack<>();
        st.push(list.get(0));
        for(int i=1;i<list.size();i++){
            int[] prev = st.peek();
            int pe = prev[1];
            int cs = list.get(i)[0];
            if(cs>pe){
                st.push(list.get(i));
                
            }
            else{
                prev[1]=Math.max(pe,list.get(i)[1]);
                st.pop();
                st.push(prev);
            }
        }
        int[][] res = new int[st.size()][2];
        for(int i=st.size()-1;i>=0;i--){
            int[] ar = st.pop();
            res[i]=ar;
        }
        return res;
    }
}
