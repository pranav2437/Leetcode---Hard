class Solution {
    static char[][] sudoku = new char[9][9];
    
    public static void solveSudoku(char[][] board) {
        int n=board.length;
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                sudoku[i][j]=board[i][j];
            }
        }
        solve(board,0,0);
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                board[i][j]=sudoku[i][j];
            }
        }
        
    }
    public static boolean isValid(char[][] board,int i,int j, char option){
        for(int c=0;c<board.length;c++){
            if(board[i][c]==option){
                return false;
            }
        }
        for(int r=0;r<board.length;r++){
            if(board[r][j]==option){
                return false;
            }
        }
        int sr=(i/3) * 3 ;
        int sc=(j/3) * 3 ;
        for(int r=sr;r<sr+3;r++){
            for(int c=sc;c<sc+3;c++){
                if(board[r][c]==option){
                    return false;
                }
            }
        }
        return true;
    }
    public static void solve(char[][] board,int i,int j){
        if(i==board.length && j==0){
            for(int r=0;r<9;r++){
            for(int c=0;c<9;c++){
                sudoku[r][c]=board[r][c];
            }
        }
            return;
        }
        else if(j==board.length-1){
            if(board[i][j]!='.'){
                solve(board,i+1,0);
            }
            else{
                for(char o='1';o<='9';o++){
                    if(isValid(board,i,j,o)){
                        board[i][j]=o;
                        solve(board,i+1,0);
                        board[i][j]='.';
                    }
                }
            }
        }
        else{
            if(board[i][j]!='.'){
                solve(board,i,j+1);
            }
            else{
                for(char o='1';o<='9';o++){
                    if(isValid(board,i,j,o)){
                        System.out.print(o);
                        board[i][j]=o;                        
                        solve(board,i,j+1);
                        board[i][j]='.';
                    }
                }
            }
        }
    }
}
